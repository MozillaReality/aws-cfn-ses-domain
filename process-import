#!/usr/bin/env python3
#
# Usage: process-import [FILE...]
#   Copies contents of each FILE (default stdin) to stdout,
#   replacing all instances of `@import <filename>` with the
#   contents of <filename>, indented to the level of the
#   @import directive.
#
# Handy for preprocessing, e.g., yaml files:
#   Code:
#     ZipFile: |
#       @import index.py

import os
import os.path
import re
import sys
from textwrap import indent


def process_import(line, source_filename=None):
    """Return either line or result of processing @import directive in line.

    The @import filename can be relative or absolute, making this
    EXTREMELY UNSAFE to use on user-provided content.
    """
    match = re.match(r'^(?P<indent>\s*)@import\s+(?P<filename>\S+)', line)
    if match:
        import_filename = match.group("filename")
        if not os.path.isabs(import_filename):
            # import relative to source_filename (or cwd if reading stdin)
            basedir = os.path.dirname(source_filename) if source_filename else os.getcwd()
            import_filename = os.path.normpath(os.path.join(basedir, import_filename))
        with open(import_filename, mode="r") as f:
            imported = f.read()
        return indent(imported, match.group("indent"), lambda l: True)
    else:
        return line


if __name__ == "__main__":
    import fileinput
    for line in fileinput.input():
        sys.stdout.write(process_import(line, fileinput.filename()))
